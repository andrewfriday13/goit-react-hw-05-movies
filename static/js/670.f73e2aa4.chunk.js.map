{"version":3,"file":"static/js/670.f73e2aa4.chunk.js","mappings":"2LACA,EAA4B,yBAA5B,EAAiE,yB,SC6CjE,EAxCkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACbC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,eAAIC,UAAWC,EAAf,SACGJ,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACT,yBACE,UAAC,KAAD,CAAML,UAAWC,EAAeK,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMV,GAApE,UACqB,OAAhBO,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAG,iBAAYN,GACfO,MAAM,QACNC,OAAO,WAGT,gBACEH,IAhBI,yFAiBJC,IAAG,iBAAYN,GACfO,MAAM,QACNC,OAAO,WAEX,0BAAOR,QAhBJD,EADA,KAuBhB,C,gKCnBD,EAhBmB,SAAC,GAA0C,IAAzCU,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,OAC7C,OAAO,iBAAMC,SAAUH,EAAhB,UACP,8BACI,kBACAE,OAAQA,EACPE,KAAK,OACLC,SAAUJ,EACVK,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEb,mBAAQJ,KAAK,SAAb,yBAGP,E,SCkDA,EAtDa,WAAK,IAAD,EAElB,GAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAMzB,EAAN,KAAa0B,EAAb,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAME,EAAN,KAAiBC,EAAjB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAiCN,EAAAA,EAAAA,WAAS,GAA1C,eAAOO,EAAP,KAAkBC,EAAlB,KAGMf,EAAM,UAAIY,EAAaI,IAAI,iBAArB,QAAkC,GAC9C,GAA+BT,EAAAA,EAAAA,UAASP,GAAxC,eAAMiB,EAAN,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WAENC,EAASH,GACRI,MAAK,YAAkB,IAAhBC,EAAe,EAAfA,QAAgBC,QAAQC,IAAIF,GAAUd,GAAU,OAAKc,GAAU,IACtEG,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,EAAIC,QAApB,IACTC,SAEJ,GAAE,CAAEnB,IAEH,IAAMW,EAAQ,mCAAG,WAAOpB,GAAP,6EACC,mCADD,SAGf6B,EAAAA,EAAAA,IAAA,4DAFgB,mCAEhB,kBAAgF7B,IAHjE,cAEToB,EAFS,yBAIRA,EAASU,MAJD,2CAAH,sDAsBhB,OAAO,iCACF,SAAC,EAAD,CACA9B,OAAQA,EACPF,aAXe,SAAAiC,GACjBA,EAAMC,iBACNZ,EAASW,EAAME,QACfvB,GAAcD,GACdyB,SAASC,cAAc,SAASC,MAAQ,GACxCrB,GAAa,EAChB,EAMKhB,aAnBe,SAAC,GAAc,IAAbkC,EAAY,EAAZA,OACXG,EAAQH,EAARG,MACR,GAAa,KAAVA,EAAc,OAAOvB,IACxBK,EAAYkB,GACZvB,EAAgB,CAAEb,OAASiC,EAAOG,OACrC,IAgBUtB,GAA8B,IAAjBhC,EAAMuD,SAAiB,wDACxC,SAACC,EAAA,EAAD,CAAWxD,MAAOA,KAClB,SAAC,KAAD,MAEL,C","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/style.module.css?748a","components/MovieList/MovieList.jsx","components/formSearch/formSearch.jsx","pages/movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"trendList\":\"style_trendList__uE0xO\",\"trendItem\":\"style_trendItem__ooUqp\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './style.module.css'\n\n\n\nconst MovieList = ({ films }) => {\n  const location = useLocation();\n  const emptyPoster = 'https://upload.wikimedia.org/wikipedia/commons/c/c2/No_image_poster.png?20170513175923'\n\n  return (\n    <ul className={css.trendList}>\n      {films.map(({ id, title, poster_path }) => (\n        <li key={id}>\n          <Link className={css.trendItem} to={`/movies/${id}`} state={{ from: location }}>\n              {poster_path !== null ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={`Poster ${title}`}\n                  width=\"250px\"\n                  height=\"375px\"\n                />\n              ) : (\n                <img\n                  src={emptyPoster}\n                  alt={`Poster ${title}`}\n                  width=\"250px\"\n                  height=\"375px\"/>\n              )}\n              <span>{title}</span>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","const FormSearch = ({handleSabmit, handleChange, search}) => {\n    return <form onSubmit={handleSabmit}>\n    <label>\n        <input \n        search={search}\n         type=\"text\"\n         onChange={handleChange}\n         autoComplete=\"off\"\n         autoFocus\n         placeholder=\"Search movies\"\n        />\n        <button type=\"submit\"> search</button>\n    </label>\n   </form>\n}\n\nexport default FormSearch","import { useState, useEffect } from \"react\"\nimport axios from 'axios';\nimport {  Outlet, useSearchParams } from \"react-router-dom\";\nimport FormSearch from \"components/formSearch/formSearch\";\n\n\nimport MovieList from \"components/MovieList/MovieList\";\n\n\n\nconst Movies =()=>{\n\nconst[films, setFlilms] = useState([])\nconst[sendFetch, setSendFetch] =useState(false)\nconst [searchParams, setSearchParams] = useSearchParams();\nconst[ emptyList, setEmptyList] =useState(false) \n\n\nconst search  = searchParams.get(\"search\") ?? \"\";\nconst[nameFilm, setNameFilm] = useState(search)\n\nuseEffect(() => {\n\n    getFilms(nameFilm )\n    .then(({results}) =>   {console.log(results); setFlilms([ ...results])})\n    .catch(err => console.log(err.message))\n    .finally()\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [ sendFetch])\n\n  const getFilms = async (search) =>{ \n    const API_KEY = '7140726491bb46cefd66d6c99674ef87'\n    const getFilms = await \n    axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${search}`)\n    return getFilms.data \n}\n\nconst handleChange = ({target}) => {\n    const { value} =target\n    if(value === '') return setSearchParams()\n    setNameFilm(value) \n    setSearchParams({ search : target.value })\n}\n\nconst handleSabmit = event =>{\n    event.preventDefault()\n    getFilms(event.target)\n    setSendFetch(!sendFetch)\n    document.querySelector('input').value = '';\n    setEmptyList(true)\n}\n\nreturn <>\n     <FormSearch\n     search={search }\n      handleSabmit={handleSabmit}\n      handleChange={handleChange}\n      />\n       {  (emptyList && films.length === 0 )&& <p>Please, change your request</p>}\n       <MovieList films={films}/>\n       <Outlet/>\n    </>\n }\n\n export default Movies\n\n\n"],"names":["films","location","useLocation","className","css","map","id","title","poster_path","to","state","from","src","alt","width","height","handleSabmit","handleChange","search","onSubmit","type","onChange","autoComplete","autoFocus","placeholder","useState","setFlilms","sendFetch","setSendFetch","useSearchParams","searchParams","setSearchParams","emptyList","setEmptyList","get","nameFilm","setNameFilm","useEffect","getFilms","then","results","console","log","catch","err","message","finally","axios","data","event","preventDefault","target","document","querySelector","value","length","MovieList"],"sourceRoot":""}